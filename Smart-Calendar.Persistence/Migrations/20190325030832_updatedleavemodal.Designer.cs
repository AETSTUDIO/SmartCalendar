// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Smart_Calendar.Persistence;

namespace Smart_Calendar.Persistence.Migrations
{
    [DbContext(typeof(SmartCalendarDbContext))]
    [Migration("20190325030832_updatedleavemodal")]
    partial class updatedleavemodal
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Smart_Calendar.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Email");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<int>("RoleId");

                    b.HasKey("AccountId");

                    b.HasIndex("RoleId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("Smart_Calendar.Domain.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Smart_Calendar.Domain.Entities.LeaveCategory", b =>
                {
                    b.Property<int>("LeaveCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LeaveType")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.HasKey("LeaveCategoryId");

                    b.ToTable("LeaveCategories");
                });

            modelBuilder.Entity("Smart_Calendar.Domain.Entities.LeaveRequest", b =>
                {
                    b.Property<int>("LeaveRequestId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("IsApproved");

                    b.Property<int>("LeaveCategoryId");

                    b.Property<DateTime?>("StartDate");

                    b.Property<Guid>("UserId");

                    b.HasKey("LeaveRequestId");

                    b.HasIndex("LeaveCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("LeaveRequests");
                });

            modelBuilder.Entity("Smart_Calendar.Domain.Entities.Position", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("PositionId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Smart_Calendar.Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Smart_Calendar.Domain.Entities.Shift", b =>
                {
                    b.Property<int>("ShiftId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TimeSlot");

                    b.HasKey("ShiftId");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("Smart_Calendar.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("AccountId");

                    b.Property<int>("DepartmentId");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("Gender");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<int>("PositionId");

                    b.HasKey("UserId");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PositionId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Smart_Calendar.Domain.Entities.UserShift", b =>
                {
                    b.Property<int>("UserShiftId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Day");

                    b.Property<int>("ShiftId");

                    b.Property<Guid>("UserId");

                    b.HasKey("UserShiftId");

                    b.HasIndex("ShiftId");

                    b.HasIndex("UserId");

                    b.ToTable("UserShifts");
                });

            modelBuilder.Entity("Smart_Calendar.Domain.Entities.Account", b =>
                {
                    b.HasOne("Smart_Calendar.Domain.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Smart_Calendar.Domain.Entities.LeaveRequest", b =>
                {
                    b.HasOne("Smart_Calendar.Domain.Entities.LeaveCategory", "LeaveCategory")
                        .WithMany("LeaveRequest")
                        .HasForeignKey("LeaveCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Smart_Calendar.Domain.Entities.User")
                        .WithMany("LeaveRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Smart_Calendar.Domain.Entities.User", b =>
                {
                    b.HasOne("Smart_Calendar.Domain.Entities.Account", "Account")
                        .WithOne("User")
                        .HasForeignKey("Smart_Calendar.Domain.Entities.User", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Smart_Calendar.Domain.Entities.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Smart_Calendar.Domain.Entities.Position", "Position")
                        .WithMany("Users")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Smart_Calendar.Domain.Entities.UserShift", b =>
                {
                    b.HasOne("Smart_Calendar.Domain.Entities.Shift", "Shift")
                        .WithMany("UserShift")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Smart_Calendar.Domain.Entities.User", "User")
                        .WithMany("UserShift")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
